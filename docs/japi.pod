=head1 NAME

japi - A template project

=head1 WTF?

You may use this project in order to build your own Debian package for your own project. This has been tested with Debian GNU/Linux Squeeze and Debian GNU/Linux Wheezy. 

Feel free to modify any aspects. This project is just an empty example japi.

Follow these steps:

=head2 Install required packages

Run the following:

    sudo aptitude install lintian devscripts dpkg-dev make perl

Todo: Ensure this are the correct packages. In order to test that I would have to setup a blank Debian system.

=head2 Compile the project

Go to the to level directory and run

    make

To test run

    ./bin/japi

It should print out the version number of the project.

=head2 Create a Debian package

Go to the to level directory and run

    make deb

It will create the files like:

    ../japi_0.0.0.0_all.deb
    ../japi_0.0.0.0.dsc
    ../japi_0.0.0.0_amd64.changes
    ../japi_0.0.0.0.tar.gz

It should create a debian package in ../. Check and install it, e.g:

    lintian --pedantic ../japi_0.0.0.0_all.deb 
    sudo dpkg -i ../japi_0.0.0.0_all.deb 

Run 

    dpkg -L japi

to see whats in there. You can now run

    /usr/bin/japi

or for example

    man japi

=head2 Read the Makefile

Read the Makefile in order to understand what's going on.

=head1 Customize

Now, since you understood everything feel free to customize everything the way you want it. E.g.: 

    Don't use POD for documentation but LaTeX

    Compile a C program

    Include a ./lib dir, add it to the 'install' Makefile rule

    etc etc.

You should also consider the following:

=head2 Manual page

This template is using POD for creating manual pages. Edit ./docs/japi.pod and run 

    make documentation

in order to build ./docs/japi.1. The page will be included in the resulting debian package automatically. You can review the page with

    man ./docs/japi.1

=head2 Renaming japi into your project name 

Rename all files which have *japi* included into your own new package name. You can do that with:

    PROJECTNAME=yourproject
    find . -name \*japi\* | 
    while read japi; do git mv $japi ${japi/japi/$PROJECTNAME}; done

Search all content and rename *japi* into your own new package name. You can do that with:

    grep -R japi . | grep -v .git | 
    cut -d: -f1 | uniq | xargs sed -i "s/japi/$PROJECTNAME/g"  

=head2 Updating ./debian

Edit the following files accordingly to your new project (e.g. with vim):

    ./debian/control
    ./debian/copyright
    ./debian/README

=head2 Update changelog

Go to the to level directory and run

    dch -i
