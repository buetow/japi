#!/usr/bin/env perl

# The japi utility (http://japi.buetow.org)
# 2014 (c) Paul C. Buetow

use v5.14;
use strict;
use warnings;
use autodie;

package Japi::Japi {
  use Moo;
  use Getopt::Long;
  use Data::Dumper;
  use IO::File;
  use Term::ReadKey;
  use MIME::Base64 qw( decode_base64 );

  our $NAME = 'Japi';
  our $VERSION = 'VERSION_DEVEL';

  has opts => ( is => 'rw' );

  # Get all the program opts
  sub getopts {
    my $self = shift;

    # Prepare the option has for GetOptions, type '' is default type bool
    # Also set some default values.
    my %opts = (
      # General options
      version  => { type => '',   value => 0 },
      nocolor  => { type => '',   value => 0 },
      #verbose  => { type => '',   value => 0 },
      debug    => { type => '',   value => 0 },
      help     => { type => '',   value => 0 },
      passfile => { type => '=s', value => "$ENV{HOME}/.japipass" },

      # Jira specific options
      jira_uribase    => { type => '=s', value => 'https://your-jira.example.com' },
      jira_user       => { type => '=s', value => $ENV{USER} },
      jira_query      => { type => '=s', value => 'search?jql=project=MT and status not in (Resolved,Closed)' },
      jira_apiversion => { type => '=s', value => 'rest/api/2' },
    );

    $self->opts(\%opts);

    # Get the options. Say the error and the synopsis if any errors.
    $self->say_synopsis(1) unless
      GetOptions( map { $_ . $opts{$_}{type} => \$opts{$_}{value} } keys %opts );

    if ( $opts{debug}{value} ) {
      say 'Opts';
      say Dumper %opts;
    }

    if ( $opts{help}{value} ) {
      $self->say_synopsis();

    } elsif ( $opts{version}{value} ) {
      $self->say_version();
    }

    $self->get_pass();
  }

  # Get the Jira API password from base64 encoded file or from stdin.
  sub get_pass {
    my $self = shift;
    my $opts = $self->opts;

    # Try to read the pass from a file
    my $fh = IO::File->new();
    if ($fh->open($opts->{passfile}{value})) {
      chomp(my $pass64 = <$fh>); 
      $fh->close();
      $opts->{jira_pass}{value} = decode_base64($pass64);

      # Try to read the pass from stdin
    } else {
      say "Type password for user $opts->{jira_user}{value}: ";
      ReadMode('noecho');
      chomp($opts->{jira_pass}{value} = <STDIN>);
      ReadMode(0);
    }
  }

  # Dynamically generate the synopsis from the options hash and say it.
  sub say_synopsis {
    my ($self, $ec) = @_;
    my $opts = $self->opts;
    my %tstr = ( '=s' => 'STRING', '' => '' );
    $ec //= 0;

    say "Synopsis: $0";
    for (sort keys %$opts) {
      my $tstr = $tstr{$opts->{$_}{type}} // '';
      if ($tstr ne '') {
        my $value = $opts->{$_}{value} // '';
        $tstr = " <$tstr:$value>";
      }
      say "\t[--$_$tstr]";
    }
    say 'You may also read the manual page';
    exit $ec;
  }

  sub say_version {
    my $self = shift;

    say "This is $NAME version $VERSION";
    exit 0;
  }

  # Get an opt or die if a specific opt does not exist.
  sub opt {
    my ($self, $opt) = @_;

    die "No such option: $opt\n"
      unless exists $self->opts->{$opt};

    return $self->opts->{$opt}{value};
  }
}

package Japi::Jira {
  use Moo;
  use JIRA::REST; # From CPAN (install via CPAN shell e.g.)
  use Data::Dumper;
  use Term::ANSIColor;

  has user       => ( is => 'ro' );
  has pass       => ( is => 'ro' );
  has query      => ( is => 'ro' );
  has apiversion => ( is => 'ro' );
  has uribase    => ( is => 'ro' );
  has issues     => ( is => 'rw' );
  has nocolor   => ( is => 'ro' );

  sub run_query {
    my $self = shift;
    my $uri = join '/', $self->uribase, $self->apiversion;

    print color 'bold green' unless $self->nocolor;
    say "==> Querying $uri/".$self->query;
    print color 'reset' unless $self->nocolor;

    my $jira = JIRA::REST->new($uri, $self->user, $self->pass);
    my $result = $jira->GET($self->query);

    $self->issues($result->{issues});
  }

  sub say_issues {
    my $self = shift;
    my $webase = join '/', $self->uribase, 'browse/';
    my $counter = 0;

    map {
      my $f = $_->{fields};
      my $r = $f->{reporter};

      print color 'blue' unless $self->nocolor;
      printf "(%02d) Created: %s; Reporter: %s\n",
        ++$counter,
       $self->created_str($f->{created}),
       "$r->{displayName} ($r->{name})";
      print color 'reset' unless $self->nocolor;

      print color 'bold cyan' unless $self->nocolor;
      say "Summary: $f->{summary}";
      print color 'reset' unless $self->nocolor;

      #print color 'blue' unless $self->nocolor;
      say "URL: $webase$_->{key}";
      #print color 'reset' unless $self->nocolor;

    } sort {
      $a->{fields}{created} cmp $b->{fields}{created};

    } grep {
      not defined $_->{fields}{assignee};

    } @{$self->issues};

    say '';
    print color 'bold green' unless $self->nocolor;
    say "==> Listed $counter issues";
    print color 'reset' unless $self->nocolor;
  }

  # Return date in human readable format
  sub created_str {
    my ($self, $created) = @_;

    # Parse 2014-02-19T11:56:47.000+0100
    my ($y, $m, $d, $t) = $created =~ /^(\d{4})-(\d\d)-(\d\d)T(\d\d:\d\d:\d\d)/;

    return "$d.$m.$y $t";
  }
}

my $japi = Japi::Japi->new();
$japi->getopts();

my $jira = Japi::Jira->new(
  user => $japi->opt('jira_user'),
  pass => $japi->opt('jira_pass'),
  query => $japi->opt('jira_query'),
  uribase => $japi->opt('jira_uribase'),
  apiversion => $japi->opt('jira_apiversion'),
  nocolor => $japi->opt('nocolor'),
);

$jira->run_query();
$jira->say_issues();


